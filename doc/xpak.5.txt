XPAK(5)
=======

NAME
----

xpak - The XPAK Data Format

SYNOPSIS
--------

----
<tarball>:      |<-xpak_len->|
           <tar>|<   xpak   >|<xpak_len>"STOP"

<xpak>   : "XPAKPACK"<index_len><data_len><index><data>"XPAKSTOP"

<index>  : |<-------------index_len------------->|
           |<index1><index2><index3><index4><...>|

<indexN> :           |<-name_len->|
           <name_len>|<   name   >|<data_offset><data_len>

<data>   : |<--------------data_len------------->|
           |<-dataN_offset->|<-dataN_len->|
           |<     data     >|<  data_N   >|<data>|
----

NOTES
-----

DATA TYPES
~~~~~~~~~~

*Integer*::

        Every offset or length(len) value in this documentation will be an
        unsigned 32bit integer in big endian byte order(32 bit unsigned big
        int or uint32(big)).

*String*::

        All strings, mentioned in this documentation are ASCII(7) encoded, and
        *not* null terminated.

*Values*::
        
        The actual values of the individual xpak entries are stored as
        Strings.

VERTICAL BARS
~~~~~~~~~~~~~

The vertical bars *|* are not part of the file format, they are merely used to
illustrate how the offset values apply to the data.

DETAILED
--------

Every gentoo binary package has a xpak attached to it which contains the
medatata found in the metadata cache, the ebuild(5) it was built from, and a
complete dump of the build environment (environment.bz2).

Lets have a look at this XPAK:

If you look at a gentoo binary package (binpkg) with a hex-editor you'll
notice the after the data, which belongs to the tarball you find a binary blob
- the <xpak>; an offset which holds the bytes from the start of the <xpak> to
the end of that blob - <xpak_len>; and finally the String "STOP":

----
      |<-xpak_len->|
<tbz2>|<   xpak   >|<xpak_len>"STOP"|
----

Here you see the tbz2 archive, and the attached xpak-blob, the xpak-len and
the string "STOP" at the end.

If we read the length and subtract <xpak_len> bytes from the location of
xpak_len, we have found the start of the XPAK Block which starts with the
String "XPAKPACK". This xpak block consists of the string "XPAKPACK"; the
length of the index block - <index-len>; the length of the data block -
<data-len>; an <index-len> bytes long binary blob containing the index; a
<data-len> bytes long binary blob containing the data; and the string
"XPAKSTOP" at the end:

----
                               |<-index_len->|<-data_len->|
"XPAKPACK"<index_len><data_len>|<   index   >|<   data   >|"XPAKSTOP"
----

To actually get the index and the data, we extract <index_len> bytes after the
end of <data_len> for the index block and then cut out the next <data_len>
bytes for the data block. If we have done everything right up to this point,
the following bytes would be the ASCII formatted string "XPAKSTOP".

The actual data are truncated into one big block - so if we want to read them
we need the actual positions of each datum in this big data block; this
information can be obtained using the indices which are stored in the index
block.

The index block consists of contiguous index items:

----
|<-----------------------index_len---------------------->|
|<index1><index2><index3><index4><index5><index6><index7>|
----

The index block holds all information we need to find the data we want in the
<data> block. It consists of contiguous index elements with a total length of
<index_len> bytes. Each of those index elements stands for one item in the
data block and consists of the length of its name (<name_len>), a <name_len>
bytes long string (the Name of the data block, such as DEPEND), the offset of
the data block (data_offset) and the length of that data block (<data_len>):

----
          |<-name_len->|
<name_len>|<   name   >|<dataN_offset><dataN_len>
----

Now lets take a closer look at the data block: the data block contains
contiguous data blocks with a total length of <data_len> bytes:

----
|<------------------------data_len------------------------>|
|<data1><data2><data3><data4><data5><data6><data7><data...>|
----

This binary block is <data_len> bytes long and consists of truncated data.

To select one data element, we need the <data_offset> and the <data_len> from
the index, if we have those we can count <data_offset> bytes from the start of
the data block, and then cut out the next <data_len> bytes. There we find our
data block(such as the DEPEND string):

----
|<-----dataN_offset----->|<--dataN_len->|
|<data1data2data3data...>|<data-we-want>|
----

AUTHORS
-------

Lars Hartmann <lars@chaotika.org>

COPYING
-------

Copyright (C) 2008-2009 Lars Hartmann +
All rights reserved.

Redistribution with or without modification, is permitted provided that the
following condition is met:

- Redistribution of this text must retain the above copyright notice and this
  condition.
